{"version":3,"file":"main.js","mappings":"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","sources":["webpack://yandex_praktikum/./src/components/card.js","webpack://yandex_praktikum/./src/components/modal.js","webpack://yandex_praktikum/./src/components/validation.js","webpack://yandex_praktikum/./src/components/api.js","webpack://yandex_praktikum/./src/index.js"],"sourcesContent":["// @todo: Темплейт карточки\r\nconst cardTemplate = document.querySelector('#card-template');\r\n\r\n// @todo: Функция создания карточки\r\nexport function createCard(myId, cardData, { likeCard, openModalDelete, openModalImage } = {}) {\r\n      const cardElement = cardTemplate.content.cloneNode(true);\r\n      const cardItem = cardElement.querySelector('.card');\r\n      const cardId = cardData._id;\r\n      const cardTitle = cardElement.querySelector('.card__title');\r\n      const cardImage = cardElement.querySelector('.card__image');\r\n      const deleteButton = cardElement.querySelector('.card__delete-button');\r\n      const likeButton = cardElement.querySelector('.card__like-button');\r\n      const arrLikes = cardData.likes;\r\n      const likes = cardElement.querySelector('.card__like-likes');\r\n      cardTitle.textContent = cardData.name;\r\n      cardImage.src = cardData.link;\r\n      cardImage.alt = cardData.name;\r\n      if (cardData.owner._id == myId) {\r\n        deleteButton.classList.remove('card__delete-button_inactive');\r\n      }     \r\n      arrLikes.some((like) => {\r\n        if(like._id == myId) {\r\n          likeButton.classList.add('card__like-button_is-active');\r\n        }\r\n      });\r\n      likes.textContent = arrLikes.length;\r\n      likeButton.addEventListener('click', () => likeCard(likeButton, likes, cardId));\r\n      deleteButton.addEventListener('click', () => openModalDelete(cardItem, cardId));\r\n      cardImage.addEventListener('click', () => openModalImage(cardData.name, cardData.link));\r\n      return cardElement;\r\n}\r\n\r\n// @todo: Функция удаления карточки\r\nexport function removeCard(cardElement) {\r\n  cardElement.remove();\r\n}\r\n\r\n// @todo: Функция для лайка\r\nexport function likeCard (event) {\r\n    const eventTarget = event.target;\r\n    eventTarget.classList.toggle('card__like-button_is-active'); \r\n}","//@todo: Функция открытия модального окна\r\nexport function openModal(modal) {\r\n    modal.classList.add('popup_is-opened');\r\n    document.addEventListener('keydown', keyHandlerEscape);\r\n}\r\n\r\n//@todo: Функция закрытия модального окна\r\nexport function closeModal(modal) {\r\n    modal.classList.remove('popup_is-opened');\r\n    document.removeEventListener('keydown', keyHandlerEscape); \r\n}\r\n\r\nexport function keyHandlerEscape(evt) {\r\n  if (evt.key === 'Escape') {\r\n    const openedModal = document.querySelector('.popup_is-opened'); \r\n    closeModal(openedModal);\r\n  }\r\n}","const showInputError = (formElement, inputElement, validationConfig, errorMessage) => {\r\n  const errorElement = formElement.querySelector(`.${inputElement.id}-input-error`);\r\n  inputElement.classList.add(`${validationConfig.inputErrorClass}`);\r\n  errorElement.textContent = errorMessage;\r\n  errorElement.classList.add(`${validationConfig.errorClass}`);\r\n};\r\n\r\nconst hideInputError = (formElement, inputElement, validationConfig) => {\r\n  const errorElement = formElement.querySelector(`.${inputElement.id}-input-error`);\r\n  inputElement.classList.remove(`${validationConfig.inputErrorClass}`);\r\n  errorElement.classList.remove(`${validationConfig.errorClass}`);\r\n  errorElement.textContent = '';\r\n};\r\n\r\n\r\nconst checkInputValidity = (formElement, inputElement, validationConfig) => {\r\n  if (inputElement.validity.patternMismatch) {\r\n        // данные атрибута доступны у элемента инпута через ключевое слово dataset.\r\n        // обратите внимание, что в js имя атрибута пишется в camelCase (да-да, в\r\n        // HTML мы писали в kebab-case, это не опечатка)\r\n    inputElement.setCustomValidity(inputElement.dataset.errorMessage);\r\n  } else {\r\n    inputElement.setCustomValidity(\"\");\r\n  }\r\n\r\n  if (!inputElement.validity.valid) {\r\n    showInputError(formElement, inputElement, validationConfig, inputElement.validationMessage);\r\n  } else {\r\n    hideInputError(formElement, inputElement, validationConfig);\r\n  }\r\n};\r\n\r\n\r\nconst setEventListeners = (formElement, validationConfig) => {\r\n   const inputList = Array.from(formElement.querySelectorAll(`${validationConfig.inputSelector}`));\r\n   const buttonElement = formElement.querySelector(`${validationConfig.submitButtonSelector}`);\r\n   toggleButtonState(inputList, buttonElement, validationConfig.inactiveButtonClass);\r\n   inputList.forEach((inputElement) => {\r\n     inputElement.addEventListener('input', function () {\r\n       checkInputValidity(formElement, inputElement, validationConfig);\r\n       toggleButtonState(inputList, buttonElement, validationConfig.inactiveButtonClass);\r\n    });\r\n  });\r\n};\r\n\r\n// @todo: Валидация полей форм\r\nexport function enableValidation(validationConfig) {\r\n  // Найдём все формы с указанным классом в DOM,\r\n  // сделаем из них массив методом Array.from\r\n  const formList=Array.from(document.querySelectorAll(`${validationConfig.formSelector}`));\r\n   formList.forEach((formElement) => {\r\n    formElement.addEventListener('submit', (evt) => {\r\n    evt.preventDefault();\r\n    });\r\n    // Для каждой формы вызовем функцию setEventListeners,\r\n    // передав ей элемент формы\r\n    setEventListeners(formElement, validationConfig);\r\n  });\r\n\r\n};\r\n\r\nconst hasInvalidInput = (inputList) => { \r\n  return inputList.some((inputElement) => {\r\n      if (!inputElement.validity.valid || inputElement.validity.patternMismatch) {\r\n        return true;\r\n      }\r\n});\r\n};\r\n\r\nfunction toggleButtonState (inputList, buttonElement, inactiveButtonClass) {\r\n  if (hasInvalidInput(inputList)) {\r\n    buttonElement.classList.add(`${inactiveButtonClass}`);\r\n    buttonElement.disabled = true;\r\n  } else {\r\n    buttonElement.classList.remove(`${inactiveButtonClass}`);\r\n    buttonElement.disabled = false;\r\n  }\r\n};\r\n\r\n\r\n// @todo: Очистка валидации полей форм\r\nexport function clearValidation(formElement, validationConfig) {\r\n  const inputList = Array.from(formElement.querySelectorAll(`${validationConfig.inputSelector}`));\r\n  const buttonElement = formElement.querySelector(`${validationConfig.submitButtonSelector}`);\r\n  inputList.forEach((inputElement) => {\r\n    hideInputError(formElement, inputElement, validationConfig); \r\n    checkInputValidity(formElement, inputElement, validationConfig);\r\n    toggleButtonState(inputList, buttonElement, validationConfig.inactiveButtonClass);\r\n  });\r\n};","const config = {\r\n  baseUrl: 'https://nomoreparties.co/v1/wff-cohort-38',\r\n  headers: {\r\n    authorization: '6f70953c-9f8b-4632-8131-9b1d1462f41f',\r\n    'Content-Type': 'application/json'\r\n  }\r\n}\r\n\r\nfunction checkResponse(getRes) {\r\n  if (getRes.ok) {\r\n    return getRes.json();\r\n  }\r\n  // если ошибка, отклоняем промис\r\n  return Promise.reject(`Ошибка: ${getRes.status}`);\r\n};\r\n\r\n//Загрузка информации о пользователе с сервера\r\nexport const getNameProfile = () => {\r\n  return fetch(`${config.baseUrl}/users/me`, {\r\n    headers: config.headers\r\n  })\r\n  .then((res) => checkResponse(res))\r\n};\r\n\r\n//Загрузка карточек с сервера\r\nexport const getInitialCards = () => {\r\n  return fetch(`${config.baseUrl}/cards`, {\r\n    headers: config.headers\r\n  })\r\n  .then((res) => checkResponse(res))\r\n};\r\n\r\n//Редактирование профиля\r\nexport const patchNameProfile = (name, job) => {\r\n  return fetch(`${config.baseUrl}/users/me`, {\r\n    method: 'PATCH',\r\n    headers: config.headers,\r\n    body: JSON.stringify({\r\n      name: name,\r\n      about: job\r\n    })\r\n  });\r\n};\r\n\r\n//Добавление новой карточки\r\nexport const postNewCard = (cardName, cardLink) => {\r\n  return fetch(`${config.baseUrl}/cards`, {\r\n    method: 'POST',\r\n    headers: config.headers,\r\n    body: JSON.stringify({\r\n      name: cardName,\r\n      link: cardLink\r\n    })\r\n  })\r\n  .then((res) => checkResponse(res))\r\n};\r\n\r\n//Удаление карточки\r\nexport const deleteCard = (cardId) => {\r\n  return fetch(`${config.baseUrl}/cards/${cardId}`, {\r\n    method: 'DELETE',\r\n    headers: config.headers\r\n  })\r\n  .then((res) => checkResponse(res))\r\n};\r\n\r\n//Добавление лайка карточки\r\nexport const addLikeCard = (cardId) => {\r\n  return fetch(`${config.baseUrl}/cards/likes/${cardId}`, {\r\n    method: 'PUT',\r\n    headers: config.headers\r\n  })\r\n  .then((res) => checkResponse(res))\r\n};\r\n\r\n//Добавление лайка карточки\r\nexport const deleteLikeCard = (cardId) => {\r\n  return fetch(`${config.baseUrl}/cards/likes/${cardId}`, {\r\n    method: 'DELETE',\r\n    headers: config.headers\r\n  })\r\n  .then((res) => checkResponse(res))\r\n};\r\n\r\n//Редактирование аватара\r\nexport const editAvatar = (avatarUrl) => {\r\n   return fetch(`${config.baseUrl}/users/me/avatar`, {\r\n    method: 'PATCH',\r\n    headers: config.headers,\r\n    body: JSON.stringify({\r\n      avatar: avatarUrl\r\n    })\r\n  })\r\n  .then((res) => checkResponse(res))\r\n};","//импртируем стили\r\nimport './pages/index.css';\r\n//импртируем js\r\nimport { createCard, removeCard } from './components/card.js';\r\nimport { openModal, closeModal } from './components/modal.js';\r\nimport { enableValidation, clearValidation } from './components/validation.js';\r\nimport { getNameProfile, getInitialCards, patchNameProfile, postNewCard, deleteCard, addLikeCard, deleteLikeCard, editAvatar } from './components/api.js'\r\n\r\nconst cardsList = document.querySelector('.places__list');\r\n\r\n//кнопки\r\nconst buttonEditProfile = document.querySelector('.profile__edit-button');\r\nconst buttonAddCard = document.querySelector('.profile__add-button');\r\n\r\n//модальные окна\r\nconst modals = document.querySelectorAll('.popup');\r\nconst modalEditProfile = document.querySelector('.popup_type_edit');\r\nconst modalAddCard = document.querySelector('.popup_type_new-card');\r\nconst modalDelete = document.querySelector('.popup_type_delete');\r\nconst modalAvatar = document.querySelector('.popup_type_edit-avatar');\r\n\r\n//форма редактирвоания профиля\r\nconst formEditProfile = document.querySelector('form[name=\"edit-profile\"]');\r\n// Находим поля формы в DOM\r\nconst nameInputProfile = formEditProfile.querySelector('.popup__input_type_name');\r\nconst jobInputProfile = formEditProfile.querySelector('.popup__input_type_description');\r\nconst profileTitle = document.querySelector('.profile__title');\r\nconst profileDescription = document.querySelector('.profile__description');\r\nconst profileImage = document.querySelector('.profile__image');\r\nconst profileEditButton = document.querySelector('.profile__image-edit-button');\r\n\r\n//форма добавления карточки\r\nconst formNewCard = document.querySelector('form[name=\"new-place\"]');\r\n// Находим поля формы в DOM\r\nconst nameInputCard = formNewCard.querySelector('.popup__input_type_card-name');\r\nconst urlInputCard = formNewCard.querySelector('.popup__input_type_url');\r\n\r\n//форма удаления\r\nconst formDelete = document.querySelector('form[name=\"delete\"]');\r\n\r\n//форма для смены аватара\r\nconst formAvatar = document.querySelector('form[name=\"edit-avatar\"]');\r\nconst avatarInputProfile = formAvatar.querySelector('.popup__input_type_url');\r\n\r\n//настройка валидации\r\nconst validationConfig = {\r\n  formSelector: '.popup__form',\r\n  inputSelector: '.popup__input',\r\n  submitButtonSelector: '.popup__button',\r\n  inactiveButtonClass: 'button_inactive',\r\n  inputErrorClass: 'form__input_type_error',\r\n  errorClass: 'form__input-error_active'\r\n};\r\n\r\nenableValidation(validationConfig);  \r\n\r\n// Обработчик «отправки» формы редактирвоания профиля\r\nfunction handleFormProfileSubmit(evt) {\r\n    evt.preventDefault(); // Отменяет стандартную отправку формы.\r\n    const button = formEditProfile.querySelector('.popup__button');\r\n    const name = nameInputProfile.value;\r\n    const job = jobInputProfile.value;\r\n    setSavingState(button);\r\n    patchNameProfile(name, job)\r\n    .then(result => {\r\n      profileTitle.textContent = name;\r\n      profileDescription.textContent = job;\r\n      closeModal(modalEditProfile);\r\n    })\r\n    .catch(err => console.log(err))  \r\n    .finally(() => {\r\n     setInitialSaveState(button);\r\n   });  \r\n};\r\n\r\n// Обработчик «отправки» формы добавления картчоки\r\nfunction handleFormCardSubmit(myId) {\r\n  const button = formNewCard.querySelector('.popup__button');\r\n  setSavingState(button);\r\n  postNewCard(nameInputCard.value, urlInputCard.value)\r\n   .then(result => {\r\n    const cardElement = createCard(\r\n    myId,\r\n    result,\r\n    {\r\n      likeCard,\r\n      openModalDelete,\r\n      openModalImage\r\n    }\r\n  ); \r\n  cardsList.prepend(cardElement); \r\n  closeModal(modalAddCard);\r\n  })\r\n  .catch(err => console.log(err))\r\n  .finally(() => {\r\n     setInitialSaveState(button);\r\n   });  \r\n};\r\n\r\n// @todo: Открываем модальное окно для редактирования профиля\r\nbuttonEditProfile.addEventListener('click', function () { \r\n  nameInputProfile.value = profileTitle.textContent;\r\n  jobInputProfile.value = profileDescription.textContent;\r\n  openModal(modalEditProfile);\r\n  clearValidation(formEditProfile, validationConfig); \r\n});\r\n\r\n// @todo: Открываем модальное окно для добавления карточки\r\nbuttonAddCard.addEventListener('click', function () {\r\n  nameInputCard.value='';\r\n  urlInputCard.value='';\r\n  openModal(modalAddCard);\r\n  clearValidation(formNewCard, validationConfig); \r\n});\r\n\r\nfunction setSavingState(button) {\r\n    button.textContent = 'Сохранение...';\r\n}\r\n\r\nfunction setInitialSaveState(button) {\r\n    button.textContent = 'Сохранить';\r\n}\r\n\r\nfunction setSavingDeleteButton(button) {\r\n    button.textContent = 'Удаление...';\r\n}\r\n\r\nfunction setInitialDeleteButton(button) {\r\n    button.textContent = 'Да';\r\n}\r\n\r\nfunction refreshLikes(likeCountElement, responce) {\r\n    if (responce && responce.likes) {\r\n        likeCountElement.textContent = responce.likes.length;\r\n    }\r\n}\r\n\r\nfunction likeCard(likeButton, likes, cardId) {\r\n   if (likeButton.classList.contains('card__like-button_is-active')) {\r\n        deleteLikeCard(cardId)\r\n        .then(result => {\r\n          refreshLikes(likes, result);\r\n          likeButton.classList.toggle('card__like-button_is-active');\r\n        })\r\n        .catch(err => console.log(err));\r\n    } else {\r\n        addLikeCard(cardId)\r\n        .then(result => {\r\n          refreshLikes(likes, result);\r\n          likeButton.classList.toggle('card__like-button_is-active');\r\n        })\r\n        .catch(err => console.log(err));\r\n    }\r\n}\r\n\r\n// @todo: Открываем модальное окно с картинкой\r\nfunction openModalImage (cardTitle , cardImg) {\r\n    const modalTypeImage = document.querySelector('.popup_type_image');\r\n    const dataImage = modalTypeImage.querySelector('.popup__image');\r\n    const titleImage = modalTypeImage.querySelector('.popup__caption');\r\n    dataImage.alt = cardTitle;\r\n    dataImage.src= cardImg;\r\n    titleImage.textContent = cardTitle;\r\n    openModal(modalTypeImage);\r\n};\r\n\r\n\r\nlet card;\r\nlet idCard;\r\n\r\n// @todo: Открываем модальное окно с подтверждением удаления\r\nfunction openModalDelete(cardItem, cardId) {\r\n    card = cardItem;\r\n    idCard = cardId;\r\n    openModal(modalDelete);\r\n};\r\n\r\nformDelete.addEventListener('submit',  function (evt) {\r\n  evt.preventDefault(); \r\n  handleDeleteCardSubmit(card, idCard);\r\n});\r\n\r\n//нажимаем на редактирвоание аватара\r\nprofileEditButton.addEventListener('click', () => {\r\n    avatarInputProfile.value='';\r\n    clearValidation(formAvatar, validationConfig);\r\n    openModal(modalAvatar);\r\n});\r\n\r\nlet avatarUrl;\r\n\r\nformAvatar.addEventListener('submit',  function (evt) {\r\n      evt.preventDefault();\r\n      avatarUrl = avatarInputProfile.value;\r\n      handleAvatarSubmit(avatarUrl);\r\n});\r\n\r\n\r\n// @todo: Подтверждаем удаление\r\nfunction handleDeleteCardSubmit(card, idCard) {\r\n  const button = formDelete.querySelector('.popup__button');\r\n  setSavingDeleteButton(button);\r\n  deleteCard(idCard)\r\n  .then(result => {\r\n     removeCard(card);      \r\n     closeModal(modalDelete);\r\n    })\r\n   .catch(err => console.log(err))\r\n   .finally(() => {\r\n     setInitialDeleteButton(button);\r\n   });  \r\n};\r\n\r\n// @todo: Подтверждаем cмену аватара\r\nfunction handleAvatarSubmit(avatarUrl) {\r\n  const button = formAvatar.querySelector('.popup__button');\r\n  setSavingState(button);  \r\n  editAvatar(avatarUrl)\r\n   .then(result => {\r\n      profileImage.style.backgroundImage = `url(${avatarUrl})`;\r\n      closeModal(modalAvatar);  \r\n   })\r\n   .catch(err => console.log(err))\r\n   .finally(() => {\r\n      setInitialSaveState(button);\r\n   });  \r\n};\r\n\r\n\r\n// @todo: Слушателель закрытия модальных окон\r\nmodals.forEach((modal) => {\r\n  modal.addEventListener('click', (event) => {\r\n    if(event.target.classList.contains('popup__close')|| event.target.classList.contains('popup')) { // так мы проверим, что юзер кликнул на кнопку или оверлей\r\n      closeModal(modal); // и если это так, закрываем окно, на которое вешаем слушатель (он же на нем сработал)\r\n    }\r\n  })\r\n})\r\n\r\n\r\nPromise.all([getNameProfile(),getInitialCards()])\r\n .then(([resultUser, resultCards]) => {\r\n    // обрабатываем результат\r\n    const myId = resultUser._id;\r\n    profileTitle.textContent=resultUser.name;\r\n    profileDescription.textContent=resultUser.about;\r\n    profileImage.style.backgroundImage = `url(${resultUser.avatar})`;\r\n\r\n    resultCards.forEach(element => {\r\n     const cardElement = createCard(\r\n      myId,\r\n      element,\r\n      {\r\n        likeCard,\r\n        openModalDelete,\r\n        openModalImage\r\n      }\r\n    );\r\n    cardsList.append(cardElement); \r\n    });\r\n\r\n\r\n    // @todo: Прикрепляем обработчик к форме: “submit” - «отправка»\r\n    formEditProfile.addEventListener('submit', handleFormProfileSubmit);\r\n    formNewCard.addEventListener('submit', function (evt) {\r\n      evt.preventDefault();\r\n      handleFormCardSubmit(myId);\r\n    });\r\n  })\r\n  .catch(err => console.log(err));\r\n"],"names":["cardTemplate","document","querySelector","createCard","myId","cardData","_ref","arguments","length","undefined","likeCard","openModalDelete","openModalImage","cardElement","content","cloneNode","cardItem","cardId","_id","cardTitle","cardImage","deleteButton","likeButton","arrLikes","likes","textContent","name","src","link","alt","owner","classList","remove","some","like","add","addEventListener","openModal","modal","keyHandlerEscape","closeModal","removeEventListener","evt","key","hideInputError","formElement","inputElement","validationConfig","errorElement","concat","id","inputErrorClass","errorClass","checkInputValidity","validity","patternMismatch","setCustomValidity","dataset","errorMessage","valid","showInputError","validationMessage","toggleButtonState","inputList","buttonElement","inactiveButtonClass","hasInvalidInput","disabled","clearValidation","Array","from","querySelectorAll","inputSelector","submitButtonSelector","forEach","config","baseUrl","headers","authorization","checkResponse","getRes","ok","json","Promise","reject","status","card","idCard","cardsList","buttonEditProfile","buttonAddCard","modals","modalEditProfile","modalAddCard","modalDelete","modalAvatar","formEditProfile","nameInputProfile","jobInputProfile","profileTitle","profileDescription","profileImage","profileEditButton","formNewCard","nameInputCard","urlInputCard","formDelete","formAvatar","avatarInputProfile","formSelector","handleFormProfileSubmit","preventDefault","button","value","job","setSavingState","fetch","method","body","JSON","stringify","about","patchNameProfile","then","result","catch","err","console","log","finally","setInitialSaveState","refreshLikes","likeCountElement","responce","contains","res","deleteLikeCard","toggle","addLikeCard","cardImg","modalTypeImage","dataImage","titleImage","setEventListeners","enableValidation","setSavingDeleteButton","setInitialDeleteButton","handleDeleteCardSubmit","avatarUrl","avatar","editAvatar","style","backgroundImage","event","target","all","_ref2","resultUser","resultCards","element","append","cardName","cardLink","prepend","handleFormCardSubmit"],"sourceRoot":""}